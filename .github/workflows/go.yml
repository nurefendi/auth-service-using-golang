# This workflow will build a golang project
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-go

name: Go Build and Test

on:
  push:
    branches: [ "master" ]
  pull_request:
    branches: [ "master" ]

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: '1.23'

      - name: Cache Go modules
        uses: actions/cache@v3
        with:
          path: ~/go/pkg/mod
          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-

      - name: Download dependencies
        run: go mod tidy

      - name: Run static analysis
        run: go vet ./...

      - name: Build
        run: GOMAXPROCS=1 go build -v ./...

      - name: Test
        run: |
          GOMAXPROCS=1 go test -race -v -coverprofile=coverage.out ./...

      - name: Show coverage
        run: |
          go tool cover -func=coverage.out | sed -n '1,200p'

      - name: Enforce coverage threshold
        env:
          COVERAGE_THRESHOLD: ${{ secrets.COVERAGE_THRESHOLD || '100.0' }}
        run: |
          pc=$(go tool cover -func=coverage.out | tail -n1 | awk '{print $3}' | sed 's/%//')
          echo "Coverage is $pc%"
          threshold=${COVERAGE_THRESHOLD}
          awk -v pc="$pc" -v th="$threshold" 'BEGIN{if(pc+0 < th+0){print "Coverage below threshold"; exit 1}}'

      - name: Upload coverage artifact
        uses: actions/upload-artifact@v4
        with:
          name: coverage-report
          path: coverage.out
